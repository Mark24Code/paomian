{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["timeCount","App","state","currentCount","status","startCountDown","_this","timeCounter","setInterval","setState","prevState","resetCountDown","clearTimeCounter","console","log","clearInterval","this","timeMap","totalSecs","days","Math","floor","modulo","hours","minutes","seconds","concat","sec2timeObj","_timeMap$days","_timeMap$hours","_timeMap$minutes","_timeMap$seconds","react_default","a","createElement","className","_this$state","disabled","onClick","formatTime","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAGMA,SAAY,SAwGHC,6MApFbC,MAAQ,CACNC,aAAcH,EACdI,OAAQ,aAIVC,eAAiB,WAEA,YADIC,EAAKJ,MAAhBE,SAENE,EAAKC,YAAcC,YAAY,WAC7BF,EAAKG,SAAS,SAACC,GACb,IAAMP,EAAeO,EAAUP,aAC/B,OAAGA,EAAe,EACT,CACLA,aAAcA,EAAe,EAC7BC,OAAQ,WAGH,CACLD,aAAc,EACdC,OAAQ,WAIb,SAIPO,eAAiB,WACfL,EAAKM,mBACLN,EAAKG,SAAS,CACZN,aAAcH,EACdI,OAAQ,eAIZQ,iBAAmB,WACdN,EAAKC,cACNM,QAAQC,IAAIR,EAAKC,aACjBQ,cAAcT,EAAKC,qGAIrBS,KAAKJ,sDAGIT,GACT,IAAMc,EAjEV,SAAsBC,GACpB,IAAMC,EAAQC,KAAKC,MAAMH,EAAS,OAC9BI,EAASJ,EAAS,MAChBK,EAAQH,KAAKC,MAAMC,EAAM,MAC/BA,GAAe,KACf,IAAME,EAAUJ,KAAKC,MAAMC,EAAS,IAC9BG,EAAUH,EAAS,GAEzB,MAAO,CACLH,OACAI,MAAOA,EAAQ,GAAR,IAAAG,OAAiBH,GAASA,EACjCC,QAAQA,EAAU,GAAV,IAAAE,OAAmBF,GAAWA,EACtCC,QAAQA,EAAU,GAAV,IAAAC,OAAmBD,GAAWA,GAqDtBE,CAAYxB,GADLyB,EAOnBX,EAJFE,YAHqB,IAAAS,EAGf,EAHeA,EAAAC,EAOnBZ,EAHFM,aAJqB,IAAAM,EAId,EAJcA,EAAAC,EAOnBb,EAFFO,eALqB,IAAAM,EAKb,EALaA,EAAAC,EAOnBd,EADFQ,eANqB,IAAAM,EAMb,EANaA,EASvB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACH,IAAThB,GAAea,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAYhB,GACjC,OAAVI,GAAmBS,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcZ,GAClDS,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBX,GAChCQ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBV,qCAK7B,IAAAW,EAC0BpB,KAAKd,MAA9BC,EADDiC,EACCjC,aAAcC,EADfgC,EACehC,OACtB,OACE4B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,4BACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,oDACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,YACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaE,SAAmB,YAATjC,EAAoBkC,QAAStB,KAAKX,gBAA3E,4BACA2B,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaG,QAAStB,KAAKL,gBAA7C,6BAEFqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACH,SAAX/B,EAAoB,eAAKY,KAAKuB,WAAWpC,YA/EhCqC,aCTEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.505a8077.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.scss';\n\nconst timeCount = 5 * 60;\n\nfunction sec2timeObj (totalSecs) {\n  const days =  Math.floor(totalSecs / (60 * 60 * 24));\n  let modulo = totalSecs % (60 * 60 * 24);\n  const hours = Math.floor(modulo / (60 * 60));\n  modulo = modulo % (60 * 60);\n  const minutes = Math.floor(modulo / 60);\n  const seconds = modulo % 60;\n  \n  return {\n    days,\n    hours: hours < 10 ? `0${hours}`: hours,\n    minutes:minutes < 10 ? `0${minutes}`: minutes,\n    seconds:seconds < 10 ? `0${seconds}`: seconds,\n  }\n}\n\nclass App extends Component {\n\n  state = {\n    currentCount: timeCount,\n    status: 'default', // running, stop\n  }\n\n\n  startCountDown = () => {\n    const { status } = this.state;\n    if( status !== 'running') {\n      this.timeCounter = setInterval(() => {\n        this.setState((prevState) => {\n          const currentCount = prevState.currentCount;\n          if(currentCount > 0) {\n            return {\n              currentCount: currentCount - 1,\n              status: 'running',\n            }\n          } else {\n            return {\n              currentCount: 0,\n              status: 'stop',\n            }\n          }\n        })\n      }, 1000);\n    }\n  }\n\n  resetCountDown = () => {\n    this.clearTimeCounter();\n    this.setState({\n      currentCount: timeCount,\n      status: 'default',\n    });\n  }\n\n  clearTimeCounter = () => {\n    if(this.timeCounter) {\n      console.log(this.timeCounter);\n      clearInterval(this.timeCounter);\n    }\n  }\n  componentWillUnmount() {\n    this.clearTimeCounter();\n  }\n\n  formatTime(currentCount) {\n    const timeMap = sec2timeObj(currentCount)\n    const {\n      days =0,\n      hours =0,\n      minutes=0,\n      seconds=0,\n    } = timeMap;\n\n    return (\n      <div className=\"timer\">\n        {days !== 0 &&  <span className=\"time day\">{days}</span>}\n        {hours !== '00' &&  <span className=\"time hours\">{hours}</span>}\n        <span className=\"time minutes\">{minutes}</span>\n        <span className=\"time seconds\">{seconds}</span>\n      </div>\n    )\n  }\n\n  render() {\n    const { currentCount, status } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"title\">泡面时间</div>\n        <div className=\"sub-title\">Kindle泡面，面更香！</div>\n        <div className=\"info\">by @mark</div>\n        <div className=\"btn-pane\">\n          <button className=\"action-btn\" disabled={status==='running'} onClick={this.startCountDown}>开始计时</button>\n          <button className=\"action-btn\" onClick={this.resetCountDown}>重置计时</button>\n        </div>\n        <div className=\"timer-cont\">\n        {status === 'stop' ? '真香':this.formatTime(currentCount)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}